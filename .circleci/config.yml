version: 2
jobs:
  build:
    working_directory: ~/game_share
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.6.3-node
         environment:
           RAILS_ENV: test
           PGHOST: 127.0.0.1
           PGUSER: postgres
           BUNDLER_VERSION: 2.0.1
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
       - image: circleci/postgres:11.5
         environment:
           POSTGRES_USER: postgres
           POSTGRES_DB: game_share_test

    steps:
      - checkout

       # Setup bundler 2+
      - run:
          name: setup bundler
          command: |
            gem update --system
            gem uninstall bundler
            rm /usr/local/bin/bundle
            rm /usr/local/bin/bundler
            gem install bundler

      # Restore bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-
      
      - run:
          name: Install Ruby Dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 120s

      - run:
          name: Database setup
          command: |
            bundle exec rails db:create
            bundle exec rails db:migrate
       # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
              
        # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

      # run rubocop!
      - run:
          name: Rubocop
          command: bundle exec rubocop